using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using AgainstAlzheimerLibrary;

namespace AgainstAlzheimerForms
{
    public partial class frmLaberynth : Form
    {
        int seg = 0, min = 0, hour = 0;

        private CWalker ObjectWalker = new CWalker();
        private int[,] mMatrix = new int[,]
        {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0},
            {0,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0},
            {0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,0,0},
            {0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0},
            {0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0},
            {0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,0},
            {0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,0},
            {0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,0},
            {0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0},
            {0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,0},
            {0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0},
            {0,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,0},
            {0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0},
            {0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0},
            {0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
            {0,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0},
            {0,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0},
            {0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0},
            {0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,0},
            {0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0},
            {0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        };

        private void Cronometro_Tick(object sender, EventArgs e)
        {
            seg++;
            if (seg == 60)
            {
                min++;
                seg = 0;
            }
            else if (min == 60)
            {
                hour++;
                min = 0;
            }
            lblCronometro.Text = hour.ToString().PadLeft(2, '0') + ":" + min.ToString().PadLeft(2, '0') + ":" + seg.ToString().PadLeft(2, '0');
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            ObjectWalker.CreateMatrix(24, 58);
            ObjectWalker.InitializeMatrix(mMatrix);
            ObjectWalker.InitializeRoad();
            ObjectWalker.LocalizeStart();

            lblCronometro.Text = "00:00:00";
            Cronometro.Enabled = true;
            seg = 0;
            min = 0;
            hour = 0;
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            frmGameMenu ObjGameMenu = new frmGameMenu();
            ObjGameMenu.Show();
            Close();
        }

        private void frmLaberynth_Load(object sender, EventArgs e)
        {
            ObjectWalker.CreateMatrix(24, 58);
            ObjectWalker.InitializeMatrix(mMatrix);
            ObjectWalker.InitializeRoad();
            ObjectWalker.LocalizeStart();

            Cronometro.Enabled = true;
        }

        public frmLaberynth()
        {
            InitializeComponent();
        }

        private void frmLaberynth_KeyDown(object sender, KeyEventArgs e)
        {
            ObjectWalker.ControlMovesInLaberynth(picWalker, e, picLaberynth);
            if (mMatrix[ObjectWalker.mRow, ObjectWalker.mColumn] == 3)
                Cronometro.Enabled = false;

        }
    }
}
